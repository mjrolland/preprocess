% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_preprocessing_functions.R
\name{standardise}
\alias{standardise}
\title{Apply Standardisation on Protocol Variables}
\usage{
standardise(
  data = dplyr::pick(everything()),
  var_to_std,
  protocol_vars,
  covariates = NULL,
  folder,
  group = dplyr::cur_group(),
  force = NULL
)
}
\arguments{
\item{data}{A data.frame in tidy format containing the data to standardise,
i.e., one row per ID and per exposure.}

\item{var_to_std}{A character string representing the variable to standardise.
This variable should be normally distributed.}

\item{protocol_vars}{A character vector of potential protocol variables on
which to standardise.}

\item{covariates}{A character vector of names of model covariates.}

\item{folder}{A character string representing the folder where regression
outputs will be saved.}

\item{group}{A character string or vector representing the exposure group.
Used for naming output files and tracking grouping structure.
Defaults to the current grouping (via \code{dplyr::cur_group()}).}

\item{force}{A character vector of protocol variables to forcibly include in
the model regardless of statistical significance. Default is \code{NULL}.}
}
\value{
A numeric vector of corrected values after standardisation. Length matches
number of rows in \code{data}; values for which residuals are not computable are
returned as \code{NA}.
}
\description{
This function standardises the exposure data on selected protocol variables
(either categorical or continuous) as per the SEPAGES pipeline guide.
The function is designed to be called within a \code{mutate} call on grouped data,
where each group represents a different exposure.
}
\details{
The function selects protocol variables with p < 0.2 in ANOVA to adjust for
protocol effects. It constructs a model, extracts residuals, and adjusts
exposures by subtracting estimated effects. Forced variables are included
even if not statistically significant. The resulting corrected variable is
returned as a numeric vector.
}
\examples{
\dontrun{
# Example dataset
set.seed(113)
data <- data.frame(
  exposure = rnorm(100, mean = 5, sd = 2),
  protocol_var1 = sample(c("A", "B", "C"), 100, replace = TRUE),
  protocol_var2 = runif(100, 0, 1),
  age = rnorm(100, mean = 35, sd = 10)
)

# Apply standardisation function
standardised_values <- data |>
  dplyr::mutate(
    exposure_std = standardise(
      var_to_std = "exposure",
      protocol_vars = c("protocol_var1", "protocol_var2"),
      covariates = "age",
      folder = "outputs/"
    )
  )

head(standardised_values)
}
}
\seealso{
\code{\link[dplyr]{mutate}}, \code{\link[stats]{lm}}, \code{\link[stats]{predict}}, \code{\link[stats]{residuals}}
}
