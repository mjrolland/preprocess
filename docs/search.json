[{"path":"https://mjrolland.github.io/preprocess/articles/preprocess-intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to preprocess","text":"vignette demonstrates use simulated datasets illustrate application fill_in standardise functions preprocessing environmental exposure data. ⚠️ Important: fill_in function assumes variable impute normally distributed. user’s responsibility apply appropriate transformation (e.g., log-transformation) ensure normality prior using function. transformation must applied Limit Detection (LOD) ensure consistency. Specifically, covers : Handle values Limit Detection (LOD) using method proposed Helsel (1990). approach accommodates one multiple exposure components, potentially different LODs. Standardize exposure data adjusting protocol variables selected list candidates, also accounting additional covariates, following method Mortamais et al. (2012).","code":""},{"path":"https://mjrolland.github.io/preprocess/articles/preprocess-intro.html","id":"the-simulated-data","dir":"Articles","previous_headings":"","what":"The Simulated Data","title":"Introduction to preprocess","text":"datasets used example designed resemble real-world environmental exposure data. simulate common scenarios LOD handling standardization necessary. example data (dt_exp) consists following variables: 4 lognormally distributed exposures exp1, exp2, exp3 exp4, left censored (LOD), missing data. Data LOD reported “<LOD”. batch, batch effect TRUE exp1 exp4 prot1 continuous protocol variable associated exp2 prot2 continuous protocol variable associated none exposures season, season effect TRUE exp4, addition batch effect cov1, additional covariate included standardisation models Examples candidate protocol variables include: sample transportation time, sample defreeze time prior measurement. Examples additional covariates included standardisation model include: age breastfeeding duration. data wide format (one column per exposure), usual format data provided analytical laboratories.","code":"# load simulated data  data(\"dt_exp\") data(\"dt_lod\") head(dt_exp) #>     id batch             exp1             exp2              exp3       prot1 #> 1  id8     1 1.22925099690535 2.88779888466437              <LOD -0.00954975 #> 2 id14     1 4.17231182471364  3.9394983990565              <LOD -0.38237917 #> 3 id16     1 3.55763803500625 1.75607103905869 0.561280432909913 -0.59325353 #> 4 id17     1 2.25789439366093             <LOD              <LOD -0.19531902 #> 5 id22     1 6.92484889235359 1.46692222224359 0.853212096159328 -0.06349861 #> 6 id25     1 4.96218477666339 1.39213028969762              <LOD  0.36055996 #>      prot2 season             exp4         cov1 #> 1 31.35448 Autumn 3.22925099690535 -0.122238985 #> 2 47.39001 Summer 3.17231182471364 -0.042519367 #> 3 43.81518 Summer 2.55763803500625  0.005900652 #> 4 41.45147 Spring 5.25789439366093  0.330839677 #> 5 68.25540 Spring 9.92484889235359  0.034422787 #> 6 43.87650 Summer 3.96218477666339  0.241904949 head(dt_lod) #>    exp lod #> 1 exp1 1.1 #> 2 exp2 1.1 #> 3 exp3 0.4 #> 4 exp4 1.7"},{"path":"https://mjrolland.github.io/preprocess/articles/preprocess-intro.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"Prepare data","title":"Introduction to preprocess","text":"Data first needs converted tidy format (one row per id per compound, one column per variable) LOD needs added new column:","code":"# convert exposure to long format and add lod dt_exp_long <- dt_exp |>   pivot_longer(     cols = starts_with(\"exp\"),     values_to = \"val\",     names_to = \"exp\"   ) |>   left_join(dt_lod, by = \"exp\") |>   mutate(     val_num = ifelse(val == \"<LOD\", lod / 2, as.numeric(val))   ) head(dt_exp_long) #> # A tibble: 6 × 10 #>   id    batch    prot1 prot2 season    cov1 exp   val                lod val_num #>   <chr> <int>    <dbl> <dbl> <chr>    <dbl> <chr> <chr>            <dbl>   <dbl> #> 1 id8       1 -0.00955  31.4 Autumn -0.122  exp1  1.22925099690535   1.1    1.23 #> 2 id8       1 -0.00955  31.4 Autumn -0.122  exp2  2.88779888466437   1.1    2.89 #> 3 id8       1 -0.00955  31.4 Autumn -0.122  exp3  <LOD               0.4    0.2  #> 4 id8       1 -0.00955  31.4 Autumn -0.122  exp4  3.22925099690535   1.7    3.23 #> 5 id14      1 -0.382    47.4 Summer -0.0425 exp1  4.17231182471364   1.1    4.17 #> 6 id14      1 -0.382    47.4 Summer -0.0425 exp2  3.9394983990565    1.1    3.94"},{"path":"https://mjrolland.github.io/preprocess/articles/preprocess-intro.html","id":"data-description","dir":"Articles","previous_headings":"","what":"Data description","title":"Introduction to preprocess","text":"important describe data prior pre-processing. Detection rates basic statistics: Description raw exposure data Exposure level distribution:  => observe different rates data LOD. Based , exposures considered high rates data < LOD need excluded imputation-standardisation process. example exp3 removed processing categorised.","code":""},{"path":"https://mjrolland.github.io/preprocess/articles/preprocess-intro.html","id":"step-1-fill-in-data-below-lod","dir":"Articles","previous_headings":"","what":"Step 1: Fill in data below LOD","title":"Introduction to preprocess","text":"fill_in function written used tidy data (one row per id per exposure). important specify .argument mutate call order separately impute data LOD group. important step requires computing exposure specific distribution parameters, LOD can also vary one exposure another. simple example grouping variable exposure, groups like apply fill-procedure separately like exposure sample period, case .argument mutate call modified .= c(exp, period). Important: fill_in function uses method Helsel (1990), assumes variable imputed follows normal distribution. environmental epidemiology, exposure variables often log-normally distributed. Therefore, user must apply log-transformation (another appropriate transformation) variable calling fill_in, must apply transformation LOD. function perform transformation relies user ensure distributional assumptions met. Fill done like : Important: set seed prior fill-reproducibility. systematically visualise imputations make sure everything went expected:  see imputed data LOD, seem drawn correct distribution.","code":"# Impute data below LOD  set.seed(113) dt_imp <- dt_exp_long |>   filter(exp != \"exp3\") |>   mutate(     log10_val_i = fill_in(       var_to_fill = log10(val_num), # variable to be filled in, needs to be normal       lod = log10(lod)              # variable containing LOD, needs to be same unit as variable to fill     ),     .by = exp   )"},{"path":"https://mjrolland.github.io/preprocess/articles/preprocess-intro.html","id":"step-2-standardise-data-on-protocol-variables","dir":"Articles","previous_headings":"","what":"Step 2: Standardise data on protocol variables","title":"Introduction to preprocess","text":"Next want standardise filled-values protocol variables batch, prot1 prot2, taking account covariates season cov1. start describing data. can observe batch effect exp1 exp4:  can observe effect season exp4:  finally observe unequal distribution season batch:  justifies inclusion season covariate standardisation models, order differentiate effect batch effect season, want standardise batch season. can also observe association exp2 prot1:  goal standardisation process detect among protocol variables (batch, prot1 prot2) associated exposure, standardise exposures specific protocol associated. first step standardisation process define potential protocol variables might associated variable standardise extra covariates included model: define reference values categorical variables (e.g. reference value batch batch 2, batches “aligned” batch 2): Reference value continuous protocol variables median [@mortamais_correcting_2012]. protocol variables covariates listed reference values set, can apply standardisation function: crucial look standardisation process outputs data posterior standardisation step make sure done matches expected. outputs saved folder defined path argument. want inspect model diagnostics (linearity, residuals, homoscedasticity, etc.), can enable optional argument export_check_model = TRUE standardise() function. save model diagnostic plots produced performance::check_model() folder outputs. can help verify linear model assumptions hold correction models. can first look associated protocol variables, used correction: see correct variables detected. can see correction batch effect exp1 exp4:  can note still residual variability batches exp4, case can explained season effect adjusted. correction exp2 prot1:  Note: correction may apparent, realistic data likely possesses greater residual variability.","code":"ggplot(dt_imp, aes(x = factor(season), y = log10_val_i)) +   geom_boxplot() +   facet_wrap(~exp) +   see::theme_lucid() +   labs(     title = \"Imputed exposure level by season, for each exposure prior to standardising\"   ) lst_prot_vars <- c(\"batch\", \"prot1\", \"prot2\")  lst_cov <- c(\"season\", \"cov1\") # set categorical variable reference values for categorical data dt_imp <- dt_imp |>   mutate(     batch = relevel(factor(batch), ref = \"2\"),     season = relevel(factor(season), ref = \"Spring\")   ) # Standardise  dt_std <- dt_imp |>   mutate(     log10_val_i_std = standardise(       var_to_std = \"log10_val_i\",               # variable to be standardised       protocol_vars = lst_prot_vars,            # list of candidate protocol variables       covariates = lst_cov,                     # optional list of covariates, defaults to NULL       folder = \"standardisation_outputs\"        # folder where outputs are saved     ),     .by = exp                                   # grouping variable   )"},{"path":"https://mjrolland.github.io/preprocess/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthieu Rolland. Author, maintainer.","code":""},{"path":"https://mjrolland.github.io/preprocess/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rolland M (2025). preprocess: Preprocessing Functions Environmental Data. R package version 0.6.10, https://mjrolland.github.io/preprocess.","code":"@Manual{,   title = {preprocess: Preprocessing Functions for Environmental Data},   author = {Matthieu Rolland},   year = {2025},   note = {R package version 0.6.10},   url = {https://mjrolland.github.io/preprocess}, }"},{"path":"https://mjrolland.github.io/preprocess/index.html","id":"preprocess","dir":"","previous_headings":"","what":"Preprocessing Functions for Environmental Data","title":"Preprocessing Functions for Environmental Data","text":"R package preprocessing environmental datasets.","code":""},{"path":"https://mjrolland.github.io/preprocess/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Preprocessing Functions for Environmental Data","text":"can install package GitHub using devtools:","code":"devtools::install_github(\"mjrolland/preprocess\")"},{"path":"https://mjrolland.github.io/preprocess/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Preprocessing Functions for Environmental Data","text":"","code":"library(preprocess)"},{"path":"https://mjrolland.github.io/preprocess/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Preprocessing Functions for Environmental Data","text":"fill_in(): Handles values limit detection. standardise(): Standardizes exposure data based protocol variables.","code":""},{"path":"https://mjrolland.github.io/preprocess/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Preprocessing Functions for Environmental Data","text":"practical step--step guide using package, refer vignette accompanying article: Vignette: vignette(\"preprocess-intro\", package = \"preprocess\") Article: Preprocessing Environmental Data theoretical background preprocessing methodology, see detailed documentation: https://bookdown.org/mj_rolland/sepages_pipeline_doc/","code":""},{"path":"https://mjrolland.github.io/preprocess/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Preprocessing Functions for Environmental Data","text":"Contributions welcome! Feel free submit issues pull requests.","code":""},{"path":"https://mjrolland.github.io/preprocess/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Preprocessing Functions for Environmental Data","text":"package licensed MIT License.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/dt_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Environmental Data — dt_exp","title":"Simulated Environmental Data — dt_exp","text":"dataset testing preprocessing functions.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/dt_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Environmental Data — dt_exp","text":"","code":"dt_exp"},{"path":"https://mjrolland.github.io/preprocess/reference/dt_exp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Environmental Data — dt_exp","text":"data frame simulated exposure values.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/dt_exp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Environmental Data — dt_exp","text":"Generated internally.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/dt_lod.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated LOD Data — dt_lod","title":"Simulated LOD Data — dt_lod","text":"dataset containing simulated limit--detection values.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/dt_lod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated LOD Data — dt_lod","text":"","code":"dt_lod"},{"path":"https://mjrolland.github.io/preprocess/reference/dt_lod.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated LOD Data — dt_lod","text":"data frame LOD thresholds various exposures.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/dt_lod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated LOD Data — dt_lod","text":"Generated internally.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/fill_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill-in Data Below Limit Of Detection (LOD) — fill_in","title":"Fill-in Data Below Limit Of Detection (LOD) — fill_in","text":"function fills data LOD using fill-method Helsel (1990). designed work data normal distribution.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/fill_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill-in Data Below Limit Of Detection (LOD) — fill_in","text":"","code":"fill_in(var_to_fill, lod, loq = NULL)"},{"path":"https://mjrolland.github.io/preprocess/reference/fill_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill-in Data Below Limit Of Detection (LOD) — fill_in","text":"var_to_fill numeric vector values fill. lod numeric vector limit detection (LOD), length var_to_fill. loq numeric vector limit quantification (LOQ), length var_to_fill.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/fill_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill-in Data Below Limit Of Detection (LOD) — fill_in","text":"numeric vector original values LOD replaced fill-values limit detection.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/fill_in.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill-in Data Below Limit Of Detection (LOD) — fill_in","text":"function flags values imputed computes distribution parameters using NADA::cenros. computes fill-values performing random sample 0 lod normal distribution previously computed parameters. Finally, function replaces values lod fill-values.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/fill_in.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fill-in Data Below Limit Of Detection (LOD) — fill_in","text":"Helsel, D.R. (1990). Less Obvious - Statistical Treatment Data Detection Limit. Environmental Science & Technology, 24(12), 1766-1774.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/fill_in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill-in Data Below Limit Of Detection (LOD) — fill_in","text":"","code":"# Example dataset set.seed(113) values <- c(0.05, 0.1, 0.2, NA, 0.4, 0.5) lod <- rep(0.1, length(values))  # Apply fill_in function imputed_values <- fill_in(values, lod) print(imputed_values) #> [1] 0.07635231 0.10000000 0.20000000         NA 0.40000000 0.50000000"},{"path":"https://mjrolland.github.io/preprocess/reference/get_protocol_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Protocol Variables for Standardisation — get_protocol_var","title":"Get Protocol Variables for Standardisation — get_protocol_var","text":"function identifies among candidate protocol variables significantly associated exposure standardised. selection based ANOVA p-values (< 0.2). Model outputs exported files transparency quality control.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/get_protocol_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Protocol Variables for Standardisation — get_protocol_var","text":"","code":"get_protocol_var(   data,   var_to_std,   protocol_vars,   covariates,   folder,   group,   export_check_model )"},{"path":"https://mjrolland.github.io/preprocess/reference/get_protocol_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Protocol Variables for Standardisation — get_protocol_var","text":"data data.frame containing exposure, protocol variables, optional covariates. var_to_std character string giving name variable standardised. protocol_vars character vector names potential protocol variables. covariates character vector additional covariates include model (corrected ). folder character string giving directory outputs (model summary, ANOVA table, optional model check) saved. group character string vector used naming output files (typically exposure variable name). export_check_model Logical. TRUE, exports model diagnostic plots performance::check_model(). Default FALSE.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/get_protocol_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Protocol Variables for Standardisation — get_protocol_var","text":"character vector containing names protocol variables p-value < 0.2, used standardisation.","code":""},{"path":[]},{"path":"https://mjrolland.github.io/preprocess/reference/mk_tbl_std.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Standardized Table of Significant Variables from AOV Results — mk_tbl_std","title":"Create a Standardized Table of Significant Variables from AOV Results — mk_tbl_std","text":"function scans directory AOV result files (.xlsx format, ending _aov.xlsx), extracts protocol variables p-value < 0.2, creates wide-format summary table. row corresponds exposure column protocol variable.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/mk_tbl_std.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Standardized Table of Significant Variables from AOV Results — mk_tbl_std","text":"","code":"mk_tbl_std(path, lst_prot_vars)"},{"path":"https://mjrolland.github.io/preprocess/reference/mk_tbl_std.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Standardized Table of Significant Variables from AOV Results — mk_tbl_std","text":"path Character string. Path folder containing AOV result files .xlsx format. lst_prot_vars Character vector. List protocol variables check significance.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/mk_tbl_std.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Standardized Table of Significant Variables from AOV Results — mk_tbl_std","text":"tibble wide format one row per exposure one column per protocol variable. value \"X\" indicates variable significantly associated (p < 0.2) exposure. Empty cells mean non-significant missing data.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/mk_tbl_std.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Standardized Table of Significant Variables from AOV Results — mk_tbl_std","text":"","code":"if (FALSE) { # \\dontrun{ path_to_results <- \"outputs/aov_results/\" prot_vars <- c(\"batch\", \"season\", \"storage_time\") mk_tbl_std(path_to_results, prot_vars) } # }"},{"path":"https://mjrolland.github.io/preprocess/reference/standardise.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Standardisation on Protocol Variables — standardise","title":"Apply Standardisation on Protocol Variables — standardise","text":"function standardises exposure data selected protocol variables (either categorical continuous) per SEPAGES pipeline guide. function designed called within mutate call grouped data, group represents different exposure.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/standardise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Standardisation on Protocol Variables — standardise","text":"","code":"standardise(   data = dplyr::pick(everything()),   var_to_std,   protocol_vars,   covariates = NULL,   folder,   group = dplyr::cur_group(),   force = NULL,   export_check_model = FALSE )"},{"path":"https://mjrolland.github.io/preprocess/reference/standardise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Standardisation on Protocol Variables — standardise","text":"data data.frame tidy format containing data standardise, .e., one row per ID per exposure. var_to_std character string representing variable standardise. variable normally distributed. protocol_vars character vector potential protocol variables standardise. covariates character vector names model covariates. folder character string representing folder regression outputs saved. group character string vector representing exposure group. Used naming output files tracking grouping structure. Defaults current grouping (via dplyr::cur_group()). force character vector protocol variables forcibly include model regardless statistical significance. Default NULL. export_check_model Logical. TRUE, exports model diagnostic plots performance::check_model(). Default FALSE.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/standardise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Standardisation on Protocol Variables — standardise","text":"numeric vector corrected values standardisation. Length matches number rows data; values residuals computed returned NA.","code":""},{"path":"https://mjrolland.github.io/preprocess/reference/standardise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply Standardisation on Protocol Variables — standardise","text":"function selects protocol variables p-value < 0.2 ANOVA adjust protocol effects. linear model fitted including selected protocol variables covariates. Residual-based corrections computed applied exposure variable. protocol variable selected, original variable returned unmodified. Forced variables always included.","code":""},{"path":[]},{"path":"https://mjrolland.github.io/preprocess/reference/standardise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Standardisation on Protocol Variables — standardise","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   exposure = rnorm(100, mean = 5, sd = 2),   protocol_var1 = sample(c(\"A\", \"B\", \"C\"), 100, replace = TRUE),   protocol_var2 = runif(100, 0, 1),   age = rnorm(100, mean = 35, sd = 10) )  data |>   dplyr::mutate(     exposure_std = standardise(       var_to_std = \"exposure\",       protocol_vars = c(\"protocol_var1\", \"protocol_var2\"),       covariates = \"age\",       folder = \"outputs/\",       export_check_model = TRUE     )   ) } # }"}]
